The full scenario is described with comments on the rich test cases in textExtraction-test.ts.

Rich Test Case 1:
I started with a clear image (high contrast, simple background) and ran the default OCR extraction.
The LLM produced accurate text but tended to split one title into multiple blocks. I simulated a user
merging those manually because they might want the title of the poster not to be separated. The user
merge by editing the location to reflect both block, editing the text in the block to include both
word, and deleting the unnecessary block. What worked was AI was able to recognize all the text on the image.
However AI tends to split text by their position. If two words are in different row but in the same sentence,
it's still considered two different block. Another issue remaining is that the coordinates AI come up with
are just random without knowledge of the image's dimensions.

My next prompt inspired from this would be adding the following prompt to my current prompt: When two or
more short text segments appear close together (within the same logical phrase or line group), merge
them into a single text block rather than splitting them. Treat small vertical spacing as part of the
same block if the text forms a continuous sentence or title.

Rich Test Case 2:

I tested a more visually challenging image with decorative, stylized fonts to simulate the user uploads a
visually complex image where the title and subtitles use artistic, stylized fonts — curved lettering,
uneven spacing, shadows, or outline effects. Also the user uploaded an image with a non-English language.
AI was indeed able to recognize the chinese in the movie poster,and this time able to put chinese characters
that are vertical (separated by row) together into one block. However, that only works for Chinese, the English
in the poster is still separated into different blocks. Also it gave so many blocks with the same text that
doesn't even appear on the poster at all (hallucination). It seems like the AI searched the web about the poster that it returns
the name of the main actress in the TV drama with the same title name. Other remaining issues are still the
wacky position it assigns to make up textblocks, and if the text isn't clear enough, it's unable to recognize it.

My next prompt inspired from this would be adding the following prompt to my current prompt:
Do not add, infer, or search for any information that is not explicitly readable.
Do not use external knowledge or guess missing words based on what the image might represent.
Apply the same grouping logic for all languages — English, Chinese, or others — merging vertically or
horizontally aligned characters that form a single title or phrase.
When estimating coordinates, ensure that (from) and (to) precisely cover only the visible text area.
Avoid random or uniform coordinates that do not match the actual layout.

Rich Test Case 3:
I tested with an image that includes overlapping text and filled with words everywhere
on the image to try to check for overlap coordinates assigned from AI. Since the response
from the AI was able to successfully be parsed into a list of ExtractionResult,
it was still able to pair textblocks with valid coordinates. The coordinates the AI gave
although doesn't reflect the image's actual size, when I was comparing different textblocks
coordinates to each other to see their relationship, it's pretty accurate
in the the direction and order they are away from each other. What is wrong this time is
that numbers are taking up a single textblock when there's no letters next to them. Also
if the coloring of the text is similar to the image background, AI is having a hard
time recognizing the word. This problem also exists to human eyes. The issues that still
remain are accurate coordinates to the image's actual dimensions, and incorrect word
recognition when text is small.

My next prompt from this would be:
Keep numeric elements together with their associated words (e.g., “2025” and “Festival”)
in a single text block whenever they belong to the same phrase or visual line.
The incoming image's dimensions is {width}x{length}. Label textblocks with accurate coordinates
that is relevant to the image's dimensions.
